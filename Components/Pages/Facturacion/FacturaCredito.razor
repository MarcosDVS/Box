@page "/factura/cobrar"
@using Data.Response;
@using Data.Request;
@attribute [Authorize]

@if(Form)
{
    <EditForm Model="facturaRequest">
        <div class="row g-4">
            <div class="col-md-7">
                <!-- CLIENTE / CONTACTO -->
                <div class="input-group mb-3">
                    <select class="form-control" @bind="@facturaRequest.ClienteId" required readonly>
                        <option disabled selected>Cliente</option>
                        @foreach (var contacto in Contactos)
                        {
                            <option disabled value="@contacto.Id" >
                                @contacto.Nombre @contacto.Apellidos
                            </option>
                        }
                    </select>
                    
                    <button class="btn btn-outline-secondary d-print-none" 
                        @onclick="async ()=>{await PrintPageAsync();}" title="Imprimir factura">
                        <i style="font-size: 18px;" class="fw-bold text-black">üñ®</i>
                    </button>
                    <button title="Volver"
                        class="btn btn-outline-danger d-print-none"
                        type="button" id="button-addon2"
                        @onclick="Back2">
                        <i style="font-size: 18px;" class="fw-bold">‚¨Ö</i>
                    </button>
                </div>
                <!-- Detalle de factura -->
                <h5 class="mt-4 fw-bold text-uppercase">
                    Detalle de la factura <span class="text-primary">N¬∞ @facturaRequest.Id</span>
                </h5>

                <table class="table table-hover table-striped align-middle">
                    <thead class="table-dark text-uppercase">
                        <tr>
                            <th style="width:80px;">Cant</th>
                            <th>Descripci√≥n</th>
                            <th style="width:120px;">Costo</th>
                            @* <th style="width:150px;">Descuento</th> *@
                            <th style="width:100px;" class="text-center">Total</th>
                            <th style="width:60px;" class="d-print-none">...</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in facturaRequest.Detalles)
                        {
                            <tr>
                                <td>
                                    <InputNumber @onclick=" async ()=>{await Send();}"
                                        class="form-control d-print-none" 
                                        @bind-Value="@detalle.Cantidad" min="0" step="1" />
                                    <span class="d-none d-print-inline">@detalle.Cantidad</span>
                                </td>
                                <td>@detalle.Descripcion</td>
                                <td>
                                    <InputNumber class="form-control d-print-none" 
                                    @bind-Value="@detalle.Precio" @onclick=" async ()=>{await Send();}"/>
                                    <span class="d-none d-print-inline">$@($"{detalle.Precio:N2}")</span>
                                </td>
                                @* <td>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>$@($"{(detalle.SubTotal * (detalle.Descuento / 100)):N2}")</span>
                                        <details class="d-print-none">
                                            <summary class="btn btn-sm btn-outline-primary m-0 p-1">üîΩ</summary>
                                            <InputNumber class="form-control mt-2"
                                                @bind-Value="@detalle.Descuento"
                                                min="0" max="30" step="1"
                                                aria-label="Porcentaje de descuento" />
                                        </details>
                                    </div>
                                </td> *@
                                <td class="text-center">$@($"{(detalle.SubTotal - detalle.TotalDesc):N2}")</td>
                                <td>
                                    @if(Role=="Admin")
                                    {
                                        <button class="btn btn-outline-danger btn-sm d-print-none" title="Eliminar detalle" 
                                        @onclick="()=>EliminarDetalle(detalle.ProductoId)" aria-label="Eliminar detalle">
                                            <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-danger btn-sm d-print-none" title="Acci√≥n no permitida" aria-label="Eliminar detalle">
                                            <i style="font-size: 15px;" class="fw-bold">üîí</i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Resumen de la venta -->
                <div class="card mt-4">
                    <div class="card-header d-flex justify-content-between align-items-center bg-black text-white">
                        <h5 class="mb-0">Resumen</h5>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm" required @bind="facturaRequest.TypePayment" aria-label="Tipo de venta">
                                <option disabled selected>TIPO DE VENTA</option>
                                <option value="1" >CONTADO üí≤</option>
                                <option value="2">CR√âDITO üí≥</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        @* <div class="input-group mb-3 d-print-none">
                            <input type="number" @bind="facturaRequest.SaldoPagado" class="form-control form-control-sm" min="0" step="1" placeholder="Monto pagado" aria-label="Monto pagado" />
                            <button class="btn btn-success btn-sm" type="button" @onclick="CalcularCambio">
                                <i class="fas fa-cash-register" style="font-size: 20px;"></i>
                            </button>
                        </div> *@

                        <ul class="list-unstyled text-uppercase mb-0">
                            <li><strong>SubTotal:</strong> <span class="text-primary">$@($"{(facturaRequest.SubTotal - facturaRequest.ITBIS):N2}")</span></li>
                            <li><strong>ITBIS:</strong> <span class="text-danger">$@($"{facturaRequest.ITBIS:N2}")</span></li>
                            @* <li><strong>Descuento:</strong> <span class="text-success">$@facturaRequest.TotalDesc.ToString("N2")</span></li> *@
                            <li><strong>Importe:</strong> <span class="text-dark"><strong>$@($"{(facturaRequest.SubTotal - facturaRequest.TotalDesc):N2}")</strong></span></li>
                            <li>
                                <strong>PAGADO: </strong>
                                <span class="text-success">$@($"{(facturaRequest.DineroPagado):N2}")</span>
                            </li>
                            <li>
                                <strong>PENDIENTE: </strong>
                                <span class="text-danger">
                                    <strong>$@($"{(facturaRequest.SaldoPendiente):N2}")</strong>
                                </span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- PRODUCTOS -->
            <div class="col-md-5 d-print-none">
                <div class="card p-3">
                    <div class="card-header bg-black text-white fw-bold text-uppercase">
                        <h6 class="mb-0">¬øQu√© desea el cliente?</h6>
                    </div>

                    <!-- Descuento -->
                    @* <div class="mb-3">
                        <label for="Descuento" class="form-label fw-bold">Descuento (%)</label>
                        <InputNumber @bind-Value="detalleFacturaRequest.Descuento" id="Descuento" class="form-control" min="0" max="30" step="1" aria-describedby="descuentoHelp" />
                        <div id="descuentoHelp" class="form-text">Ingrese descuento m√°ximo 30%</div>
                    </div> *@

                    <!-- Precio y cantidad -->
                    <div class="mb-3 mt-2 d-flex align-items-center gap-3">
                        <label class="fw-bold mb-0">Precio:</label>
                        <span class="form-control w-50" title="Precio del producto">$@Precio.ToString("N2")</span>
                        <InputNumber class="form-control w-25" @bind-Value="Cantidad" title="Cantidad del producto seleccionado"
                        min="1" step="1" aria-label="Cantidad" />
                    </div>

                    <!-- Producto buscador -->
                    <div class="row mb-1 d-flex align-items-center gap-3">
                        <div class="col">
                            <label class="form-label fw-bold" for="productoBuscar">Buscar producto</label>
                        </div>
                        <div class="col">
                            <button class="btn btn-success mt-3 w-100" title="Agregar al detalle"
                                @onclick="AgregarAlDetalle">
                                <i class="fas fa-cart-plus" style="font-size: 20px;"></i>
                            </button>
                        </div>
                    </div>
                    <input
                        id="productoBuscar"
                        class="form-control mb-2"
                        placeholder="Producto"
                        @oninput="(e) => FiltrarProductos(e.Value.ToString())"
                        aria-autocomplete="list"
                        autocomplete="off" />

                    <div id="productos" class="list-group overflow-auto" style="max-height: 300px;">
                        @foreach (var producto in ProductosFiltrados)
                        {
                            <button class="list-group-item list-group-item-action d-flex align-items-center gap-2" type="button" @onclick="()=>BuscarPercio(producto.Id)">
                                <img src="@producto.ImagenRuta" class="img-thumbnail" width="50" height="50" />
                                <div>
                                    <strong>@producto.CodigoDescripcion</strong><br />
                                    <small>stock: @producto.Stock | precio: $@producto.Precio.ToString("N2")</small>
                                </div>
                            </button>
                        }
                    </div>

                    @if (Message != null)
                    {
                        <div class="alert alert-warning mt-3 fw-bold">
                            @Message
                        </div>
                    }
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    @if(Facturas != null)
    {
        <div class="row">
            <div class="col-12">
                <h1 class="d-none d-print-block text-center">@TituloForm</h1>
            </div>
        </div>
        <div class="modal" style="display: @(detailsPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-dark text-white">
                        <h5 class="modal-title"><b>Detalles de los Pagos</b></h5>
                        <button type="button" class="close btn btn-danger" data-dismiss="modal" 
                        aria-label="Close" @onclick="CloseDetailsPago">
                            <i style="font-size: 15px;" class="fw-bold">X</i>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if(FacturaSinPagos)
                        {
                            <div class="alert alert-warning" role="alert">
                                <h4 class="alert-heading">¬°Aviso!</h4>
                                <p>Este cliente a√∫n no ha realizado pagos.</p>
                                <hr>
                                <p class="mb-0">Por favor, aseg√∫rese de coordinar con el cliente para procesar los pagos pendientes. ¬°Gracias!</p>
                            </div>
                        }
                        else{
                            <div class="alert-warning text-dark" role="alert" style="display: @(string.IsNullOrEmpty(ErrorMessage) ? "none" : "block")">
                                <strong>@ErrorMessage</strong> 
                            </div>
                            <table class="table table-hover mt-2">
                                <thead class="bg-black text-white">
                                    <tr>
                                        <th>FacturaId</th>
                                        <th>Monto/Pagado</th>
                                        <th>Observaci√≥n</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in PagosFacturaSeleccionada)
                                    {
                                        <tr>
                                            <td>@pago.FacturaID</td>
                                            <td>$@pago.MontoPagado.ToString("N2")</td>
                                            <td>@pago.Observacion</td>
                                            <td>@pago.Fecha.ToShortDateString()</td>
                                        </tr>
                                    } 
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer bg-dark text-white d-print-none">
                        <div class="btn-group">
                            <input type="number" min="0" @bind-value="@PaiedMoney">
                            <button type="submit" class="btn btn-primary" @onclick="async()=>{await FormPago();}">
                                <i style="font-size: 15px;" class="fw-bold">‚ûï</i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="modal" style="display: @(formPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog " role="document">
                <div class="modal-content" style="width: 600px;">
                    <div class="modal-header bg-dark text-white d-print-none">
                        <h5 class="modal-title"><b>@TituloFormPago</b></h5>
                        <button type="button" class="close btn btn-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseFormPago">
                            <i style="font-size: 15px;" class="fw-bold">X</i>
                        </button>
                    </div>

                    <EditForm Model="pagoRequest" OnValidSubmit="SendPago">
                        <div class="modal-body">
                            <div class="alert alert-warning text-dark mt-2" role="alert" style="display: @(string.IsNullOrEmpty(ErrorMessage) ? "none" : "block")">
                                <strong>@ErrorMessage</strong> 
                            </div>

                            <div class="form-group input-group d-print-none d-none mb-3">
                                <span class="input-group-text bg-white text-black">
                                    <i style="font-size: 18px;" class="fw-bold text-black">üìÖ</i>
                                </span>
                                <input type="date" class="form-control" placeholder="Fecha" 
                                @bind-value="pagoRequest.Fecha" readonly/>
                            </div>
                            
                            <div class="form-group input-group mb-3 d-print-none d-none">
                                <span class="input-group-text bg-white text-black ">
                                    <i style="font-size: 18px;" class="fw-bold text-black">#Ô∏è‚É£</i>
                                </span>
                                <input type="text" class="form-control" placeholder="Codigo"
                                @bind-value="pagoRequest.FacturaID" readonly />
                            </div>

                            <div class="form-group input-group mb-3 d-print-none">
                                <span class="input-group-text bg-white text-black">
                                    <i style="font-size: 18px;" class="fw-bold text-black">üëÅ‚Äçüó®</i>
                                </span>
                                <select class="form-select" @bind="@pagoRequest.Observacion" required>
                                    <option disabled selected value="">Observaci√≥n</option>
                                    <option value="Justo üòâ">Justo üòâ</option>
                                    <option value="Antes üòé">Antes üòé</option>
                                    <option value="Atrazado üò¥">Atrazado üò¥</option>
                                </select>
                            </div>

                            <div class="card shadow rounded-3">
                                <div class="card-header bg-primary text-dark d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0 fw-bold">Factura N¬∫: @InvoiceId</h5>
                                    <span><strong>@Fecha.ToLongDateString()</strong></span>
                                </div>

                                <div class="card-body">
                                    <!-- Cliente y Observaci√≥n -->
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Cliente</label>
                                            <div class="form-control-plaintext border p-2 rounded bg-light">
                                                @CustomerName
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Observaci√≥n</label>
                                            <div class="form-control-plaintext border p-2 rounded bg-light">
                                                @pagoRequest.Observacion
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Pagado y Pendiente -->
                                    <div class="row mb-2">
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Monto Pagado</label>
                                            <div class="form-control-plaintext border p-2 rounded bg-success text-white fw-bold">
                                                $@pagoRequest.MontoPagado.ToString("N2")
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Monto Pendiente</label>
                                            <div class="form-control-plaintext border p-2 rounded @((Pending > 0) ? "bg-danger text-white" : "bg-light") fw-bold">
                                                @if (Pending > 0)
                                                {
                                                    <span >-$@Pending.ToString("N2")</span>
                                                }
                                                else
                                                {
                                                    <span>+$@Pending.ToString("N2")</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="modal-footer bg-dark text-white d-print-none">
                            <div class="btn-group">
                                <button type="submit" class="btn btn-success" @onclick="async ()=>{ await PrintPageAsync();}">
                                    Pagar <i style="font-size: 15px;" class="fw-bold">üí≤</i>
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseFormPago">
                                    Cerrar <i style="font-size: 15px;" class="fw-bold">‚ùå</i>
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Mostrar la lista de facturas -->
        <div class="table-container">
            <div class="card col-12">
                <div class="card-body">
                    <div class="row">
                        <div class="col-11">
                            <button class="btn btn-outline-secondary d-print-none text-black" title="Imprimir p√°gina" 
                                @onclick="async ()=>{await PrintPageAsync();}">
                                <span aria-hidden="true"><i style="font-size: 20px;" class="fw-bold">üñ®</i></span>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-4">
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="btnradio" id="btnPendientes" 
                                       checked="@mostrarPendientes"
                                       @onclick="() => CambiarFiltro(true)">
                                <label class="btn btn-outline-primary" for="btnPendientes">Pendientes</label>

                                <input type="radio" class="btn-check" name="btnradio" id="btnPagadas" 
                                       checked="@mostrarPagadas"
                                       @onclick="() => CambiarFiltro(false)">
                                <label class="btn btn-outline-primary" for="btnPagadas">Pagadas</label>
                            </div>
                        </div>
                        <div class="col-4"></div>
                        <div class="col-4">
                            <div class="input-group d-print-none">
                                <input type="text" class="form-control border-0 border-bottom" 
                                    placeholder="Buscar por nombre" @bind="FiltroInvoice">
                                <button class="btn btn-outline-secondary border-0 border-bottom" title="Buscar factura" 
                                    type="button" id="button-addon2" @onclick="()=>Consultar()">
                                    <i style="font-size: 20px;" class="fw-bold">üîé</i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row-12 mt-2">
                        <table class="table table-striped">
                            <thead class="bg-black text-white">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Total</th>
                                    <th scope="col">ITBIS</th>
                                    <th scope="col">Descuento</th>
                                    <th scope="col">Importe</th>
                                    <th scope="col">Pendiente</th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col" class="d-print-none">...</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var f in FacturasFiltradas)
                                {
                                    
                                    @if(f.TypePayment == "2")    
                                    {
                                        <tr>
                                            <th scope="row">@f.Id</th>
                                            <td>@f.Cliente.Nombre @f.Cliente.Apellidos
                                                <details>
                                                    <small>@FormatCustomerId(f.Cliente.Cedula)</small>
                                                    <br>
                                                    <small>@FormatPhoneNumber(f.Cliente.Telefono)</small>
                                                    <br>
                                                    <small>@f.Cliente.Direccion</small>
                                                </details>
                                            </td>
                                            <td>$@($"{(f.SubTotal - f.ITBIS):N2}")</td>
                                            <td>
                                                <span style="white-space: nowrap;">
                                                    $@($"{(f.ITBIS):N2}")
                                                </span>
                                            </td>
                                            <td>$@f.TotalDesc.ToString("N2")</td>
                                            <td>$@($"{(f.SubTotal - f.TotalDesc):N2}")</td>
                                            <td><strong>-$@f.SaldoPendiente.ToString("N2")</strong></td>
                                            <td>@f.Fecha.ToShortDateString()</td>
                                            <td>
                                                <div class="button d-print-none">
                                                    @if (f.SaldoPendiente > 0)
                                                    {
                                                        <button @onclick="() => MostrarPagos(f)" title="Mostrar pagos"
                                                            class="btn btn-outline-success me-1">
                                                            <i style="font-size: 15px;" class="fw-bold">üí≤</i>
                                                        </button>
                                                    
                                                    }
                                                    <button @onclick="()=>Seleccionar(f.Id, f)" class="btn btn-outline-primary" title="Ver detalles">
                                                        <i style="font-size: 15px;" class="fw-bold">‚Ñπ</i>
                                                    </button>
                                                    @if(Role=="Admin")
                                                    {
                                                        <button @onclick="() => ShowQuestion(f)" class="btn btn-outline-danger d-print-none ms-1" title="Eliminar factura">
                                                            <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                       <button class="btn btn-outline-danger d-print-none ms-1" title="Acci√≥n no permitida">
                                                            <i style="font-size: 15px;" class="fw-bold">üîí</i>
                                                        </button> 
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal" style="display: @(ShowConfirmation ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content shadow-lg rounded-4">
                    <div class="modal-header bg-light border-0">
                        <h5 class="modal-title text-dark fw-bold">¬øEst√°s seguro?</h5>
                        <button type="button" class="btn-close" aria-label="Cerrar" @onclick="OpenClosedConfirmation"></button>
                    </div>
                    <div class="modal-body text-center">
                        <p class="mb-0">Esta acci√≥n no se puede deshacer. ¬øDeseas continuar?</p>
                    </div>
                    <div class="modal-footer justify-content-center border-0">
                        <button class="btn btn-success px-4"
                                @onclick="async () => {
                                    await Eliminar(factura);
                                    OpenClosedConfirmation();
                                }">
                            <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i> S√≠, eliminar
                        </button>
                        <button class="btn btn-outline-secondary px-4"
                                @onclick="OpenClosedConfirmation">
                            <i style="font-size: 15px;" class="fw-bold">‚úñÔ∏è</i> Cancelar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code
{
    public DateTime? fechaFiltro { get; set; }
    public string TituloForm => ShowDetails == false ?
    "M√≥dulo de facturas a cr√©dito" : "M√≥dulo de facturaci√≥n";
    public bool ShowDetails { get; set; } = false;
    public bool ShowDetailPayment { get; set; } = false;
    public List<FacturaResponse> Facturas { get; set; } = new();
    public FacturaResponse factura { get; set; } = new();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new();
    public FacturaResponse? SelectedFactura { get; set; } // Factura seleccionada
    public bool ShowConfirmation {get; set; } = false;
    public List<ProductoResponse> ProductosFiltrados { get; set; } = new();

    void FiltrarProductos(string filtro)
    {
        Filtro = filtro;
        ProductosFiltrados = Productos
            .Where(p => p.CodigoDescripcion.Contains(filtro, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el n√∫mero telef√≥nico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el n√∫mero telef√≥nico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el n√∫mero telef√≥nico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }
    private string FormatCustomerId(string customerId)
    {
        // Verifica si el n√∫mero telef√≥nico tiene la longitud esperada
        if (customerId.Length == 11)
        {
            // Formatea el n√∫mero telef√≥nico
            return $"{customerId.Substring(0, 3)}-{customerId.Substring(3, 7)}-{customerId.Substring(10)}";
        }
        else
        {
            // Devuelve el n√∫mero telef√≥nico sin cambios si no tiene la longitud esperada
            return customerId;
        }
    }
    void OpenClosedConfirmation()
    {
        ShowConfirmation = !ShowConfirmation;
        StateHasChanged();
    }
    //Metodos Para confirmar las perdidas
    void ShowQuestion(FacturaResponse seletedItem)
    {
        OpenClosedConfirmation();
        factura = seletedItem; // Usa la variable de instancia en lugar de declarar una nueva.
    }
    void Back2()
    {
        Form = false;
        Precio = 0;
    }
    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar(FiltroInvoice);
        if (resultado.Success)
        {
            Facturas = resultado.Data?
            .OrderByDescending(f => f.Fecha)
            .ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }

    public string Role { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await Consultar2();
        await CargarContacto();
        await CargarProducto();
        await CargarPagos();
        ProductosFiltrados = Productos;

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userRoleClaim = user.FindFirst(ClaimTypes.Role);
        if (userRoleClaim != null)
        {
            Role = userRoleClaim.Value;
        }
    }

    public void Seleccionar(int Id, FacturaResponse factura)
    {
        Form = true;
        facturaRequest = Facturas
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new FacturaRequest();

        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        facturaRequest.DineroPagado = 
        facturaRequest.SaldoPagado +
        PagosFacturaSeleccionada
        .Sum(c => (decimal)c.MontoPagado);

        // Load the Descuento information for each detail in the selected factura
        foreach (var detalle in facturaRequest.Detalles)
        {
            detalle.Descuento = factura.Detalles
                .Where(d => d.Id == detalle.Id)
                .Select(d => d.Descuento)
                .FirstOrDefault();
        }
    }

    public async Task Eliminar(FacturaResponse user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    private async Task PrintPageAsync()
    {
        // Llama a la funci√≥n JavaScript para imprimir la p√°gina
        await JSRuntime.InvokeVoidAsync("printPage");
    }

    //Codigo para el formulario de pago
   public string TituloFormPago => pagoRequest.Id == 0 ? 
    "Agregar Pago" : "Modificar Pago";
    public string Filtro { get; set; } = "";
    public string FiltroInvoice { get; set; } = "";
    public bool formPago { get; set; } = false;
    public List<PagoResponse> Pagos { get; set; } = new();
    public PagoRequest pagoRequest { get; set; } = new();
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    bool MostrarErrorSeleccion { get; set; } = false;
    public string? ErrorMessage { get; set; } = null;

    async Task FormPago()
    {
        if (PaiedMoney == 0)
        {
            ErrorMessage = "El monto a pagar no puede ser $0";
            return;
        }
        if (PaiedMoney > SelectedFactura.SaldoPendiente)
        {
            ErrorMessage = "El monto a pagar no puede ser mayor al saldo pendiente $" + SelectedFactura.SaldoPendiente.ToString("N2");
            return;
        }
        ErrorMessage = null;
        formPago = true;
        detailsPago = false;
        pagoRequest.FacturaID = InvoiceId;
        await Money();

    }
    void CloseFormPago()
    {
        pagoRequest  = new PagoRequest();
        detailsPago = true;
        formPago = false;
        DetallesPago = false;
        CloseMoney();
    } 
    void Cancelar()
    {
        pagoRequest  = new PagoRequest();
        formPago = false;
    }
    
    public async Task SendPago()
    {
        pagoRequest.Fecha = DateTime.Now;
        pagoRequest.MontoPagado = Convert.ToDouble(PaiedMoney);
        if (pagoRequest.Id == 0)
        {
            // Debo registrar el contacto..
            var r = await pagoServices.Crear(pagoRequest);
            if (r.Success)
            {
                Cancelar();
                CloseMoney();
                await CargarPagos();
                await Consultar();
                StateHasChanged();
            }
        }
    }

    //Codigo Para mostrar todos los pagos realizados por factura
    public bool detailsPago { get; set; } = false;
    void DetailsPago()
    {
        detailsPago = true;
    }
    void CloseDetailsPago()
    {
        detailsPago = false;
        ErrorMessage = null;
    } 

    public List<PagoResponse> PagosFacturaSeleccionada { get; set; } = new();
    public bool FacturaSinPagos => PagosFacturaSeleccionada.Count == 0;
    public bool MostrarMensajeSinPagos { get; set; } = false;
    public bool DetallesPago { get; set; } = false;
    string CustomerName = "";
    int InvoiceId = 0;
    public static decimal PendingMoney = 0;
    public decimal PaiedMoney = 0;
    public decimal Pending = 0;

    async Task Money()
    {
        ErrorMessage = null;
        pagoRequest.MontoPagado = Convert.ToDouble(PaiedMoney);
        Pending = PendingMoney - PaiedMoney;
        
    }
    void CloseMoney()
    {
        ErrorMessage = null;
        DetallesPago = false;
        PaiedMoney = 0;
        Pending = 0;
    }

    DateTime Fecha;
    DateTime FechaPago;
    void MostrarPagos(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        detailsPago = true;
        StateHasChanged(); // Aseg√∫rate de llamar a StateHasChanged para actualizar la interfaz de usuario.

        // Establecer FacturaID en pagoRequest con el Id de la factura seleccionada
        PendingMoney = SelectedFactura.SaldoPendiente;
        CustomerName = SelectedFactura.Cliente.Nombre +" "+ SelectedFactura.Cliente.Apellidos;
        InvoiceId = SelectedFactura.Id;
        Fecha = SelectedFactura.Fecha;

        // Obtener la √∫ltima fecha de pago
        if (PagosFacturaSeleccionada.Any())
        {
            FechaPago = PagosFacturaSeleccionada.Max(p => p.Fecha);
        }
        else
        {
            // Manejar el caso donde la lista est√° vac√≠a
            // Puedes asignar un valor predeterminado a FechaPago o realizar cualquier otra acci√≥n adecuada.
        }
    }

    //De aqui en adelante es para controlar la ediccion de la factura
    public bool Chance { get; set; } = false;
    public bool Info { get; set; } = false;
    public bool Form { get; set; } = false;
    public string? Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public string ItemName { get; set; } = string.Empty;
    public List<ClienteResponse> Contactos { get; set; } = new();
    public List<ProductoResponse> Productos { get; set; } = new List<ProductoResponse>();
    public FacturaRequest facturaRequest { get; set; } = new();
    public FacturaDetalleRequest detalleFacturaRequest { get; set; } = new();
    public decimal Precio { get; set; } = 0;
    public int Cantidad { get; set; } = 1;
    public int IdProducto { get; set; } = 0;
    void BuscarPercio(int idProducto)
    {
        Precio = Productos.FirstOrDefault(p => p.Id == idProducto)!.Precio;
        IdProducto = idProducto;
    }
    void BuscarSeleccionarCliente(string Contacto)
    {
        var c = Contactos.FirstOrDefault(p => p.Nombre+" "+p.Apellidos == Contacto)!;
        if (c != null) facturaRequest.ClienteId = c.Id;
    }
    async Task Add(int Id){
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        var Cant = 1;
        var producto = Productos.FirstOrDefault(p => p.Id == Id);
        int NewStock = detalle.Cantidad + Cant;

        if (NewStock <= producto.Stock)
        {
            detalle.Cantidad += Cant;
            await productoServices.ActualizarStock(detalle.ProductoId, Cant);
            await Send();
            NewStock = 0;
        }
        else
        {
            Message = "No hay suficientes art√≠culos en el stock. üò•";
            return;
        }
    }
    async Task Remove(int Id){
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        var Cant = 1;
        var producto = Productos.FirstOrDefault(p => p.Id == Id);
        int NewStock = detalle.Cantidad - Cant;

        if (NewStock >= 1)
        {
            detalle.Cantidad -= Cant;
            await Send();
            await productoServices.StockDevuelto(detalle.ProductoId, Cant);
            NewStock = 0;
        }
        else
        {
            Message = "Debes dejar al menos un articulo. üò•";
            return;
        }
    }
    async Task EliminarDetalle(int Id)
    {
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        // Actualizar el stock del producto en la base de datos
        await productoServices.StockDevuelto(detalle.ProductoId, detalle.Cantidad);
        if (detalle != null)
        {
            facturaRequest.Detalles.Remove(detalle);
        }
        await Send();
    }
    async Task AgregarAlDetalle()
    {
        if (detalleFacturaRequest.Descuento > 30)
        {
            Message = "üòí El decuento no puede ser mayor a 30%. üí∞";
            return;
        }

        Message = null;
        var producto = Productos.FirstOrDefault(p => p.Id == IdProducto);

        if (producto != null)
        {
            var detalleExistente = facturaRequest.Detalles.FirstOrDefault(d => d.ProductoId == IdProducto);

            if (detalleExistente != null)
            {
                int nuevaCantidad = detalleExistente.Cantidad + Cantidad;

                if (nuevaCantidad <= producto.Stock)
                {
                    detalleExistente.Cantidad = nuevaCantidad;
                }
                else
                {
                    Message = "No hay suficientes art√≠culos en el stock. üò•";
                    return;
                }
            }
            else
            {
                if (Cantidad <= producto.Stock)
                {
                    facturaRequest.Detalles.Add(new FacturaDetalleRequest
                    {
                        ProductoId = IdProducto,
                        Descripcion = producto.Nombre,
                        Precio = producto.Precio,
                        Cantidad = Cantidad,
                        Descuento = detalleFacturaRequest.Descuento
                    });
                    Cantidad = 1;
                }
                else
                {
                    Message = "No hay suficientes art√≠culos en el stock. üò•";
                    return;
                }
            }

            // Actualizar el stock del producto en la base de datos
            await productoServices.ActualizarStock(IdProducto, Cantidad);

            await Send();
            Message = null;
        }
    }
   
   async Task CargarContacto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await clienteServices.Consultar("");
        if (r.Success)
        {
            Contactos = r.Data!;
        }
    }
    async Task CargarProducto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await productoServices.Consultar("");
        if (r.Success)
        {
            Productos = r.Data!;
        }
    }

    //Esto es para mostrar el Numero de la factura a registrar
    int ultimoIdFactura = 0;
    async Task Consultar2()
    {
        var resultado = await facturaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();

            // Obtener el Id de la √∫ltima factura registrada + 1
            ultimoIdFactura = Facturas.FirstOrDefault()?.Id + 1 ?? 1;
        }
        StateHasChanged();
    }

    
   
    public string TypePayment {get; set;} = string.Empty;
    async Task Send()
    {
        if (facturaRequest.SaldoPagado > facturaRequest.SaldoPagado - facturaRequest.TotalDesc 
            && facturaRequest.TypePayment == "2")
        {
            Pendiente();

            return;
        }
        
        BuscarSeleccionarCliente(Nombre);

        var result = await facturaServices.Modificar(facturaRequest);
        Message = null;

        await Consultar();
        Precio = 0;
        
    }

    public decimal Cambio = 0;
    public decimal MontoPagado = 0;
    public decimal SaldoPendiente = 0;
    public decimal Total = 0;
    void CalcularCambio()
    {
        if(facturaRequest.SaldoPagado < facturaRequest.SubTotal - facturaRequest.TotalDesc &&  facturaRequest.TypePayment == "1")
        {
            Message = "üòí El monto pagado no puede ser menor al importe de la factura üí∞";
            return;
        }
        if (facturaRequest.Detalles.Count == 0)
        {
            Message = "üòí Debes agregar al menos un producto al detalle. üõí";
            return;
        }

        if (string.IsNullOrEmpty(facturaRequest.TypePayment))
        {
            Message = "üòí Debes seleccionar el tipo de venta. üí∞";
            return;
        }

        if (facturaRequest.TypePayment == "2")
        {
            Info = true;
        }

        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        Message = null;
    }
    void Pendiente()
    {
        if(facturaRequest.TypePayment=="2")
        {
            if(MontoPagado >= Total){
                Message = "El monto pagado no puede ser mayor o igual al total üò¢";
                return;
            }
        }
        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        SaldoPendiente = Total - MontoPagado;
        Message = null;
    }

    private bool mostrarPendientes = true;
    private bool mostrarPagadas = false;

    private List<FacturaResponse> FacturasFiltradas => Facturas
        .Where(f => f.TypePayment == "2" && 
            ((mostrarPendientes && f.SaldoPendiente > 0) || 
             (mostrarPagadas && f.SaldoPendiente == 0)))
        .ToList();

    private void CambiarFiltro(bool esPendientes)
    {
        mostrarPendientes = esPendientes;
        mostrarPagadas = !esPendientes;
        StateHasChanged();
    }
}