@page "/testing"
@using Data.Request;
@using Data.Response;
@inject IJSRuntime JSRuntime;
@* @attribute [Authorize] *@

<EditForm Model="facturaRequest" OnValidSubmit="Send">
    <div class="row g-4">

        <!-- CLIENTE / CONTACTO -->
        <div class="col-md-6">
            <label for="clienteInput" class="form-label fw-bold">Cliente</label>
            <input 
                id="clienteInput"
                class="form-control"
                placeholder="Selecciona un cliente"
                list="contactos"
                @bind="Nombre"
                required
                title="Debes seleccionar un cliente"
                aria-describedby="clienteHelp" />
            <datalist id="contactos">
                @foreach (var contacto in Contactos)
                {
                    <option value="@($"{contacto.Nombre} {contacto.Apellidos}")" @onclick="()=>BuscarSeleccionarCliente(contacto.Nombre + contacto.Apellidos)">
                        @FormatCustomerId(contacto.Cedula)
                    </option>
                }
            </datalist>
            <div id="clienteHelp" class="form-text">Selecciona o escribe el cliente para facturar</div>

            <!-- Detalle de factura -->
            <h5 class="mt-4"><b>Detalle factura N¬∞:</b> @ultimoIdFactura</h5>
            <table class="table table-hover table-striped align-middle">
                <thead class="table-dark text-uppercase">
                    <tr>
                        <th style="width:80px;">Cant</th>
                        <th>Descripci√≥n</th>
                        <th style="width:120px;">Costo</th>
                        @* <th style="width:150px;">Descuento</th> *@
                        <th style="width:100px;" class="text-center">Total</th>
                        <th style="width:60px;">Acci√≥n</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in facturaRequest.Detalles)
                    {
                        <tr>
                            <td>
                                <InputNumber 
                                    class="form-control d-print-none" 
                                    @bind-Value="@detalle.Cantidad" min="0" step="1" />
                                <span class="d-none d-print-inline">@detalle.Cantidad</span>
                            </td>
                            <td>@detalle.Descripcion</td>
                            <td>
                                <InputNumber class="form-control d-print-none" @bind-Value="@detalle.Precio" />
                                <span class="d-none d-print-inline">$@($"{detalle.Precio:N2}")</span>
                            </td>
                            @* <td>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>$@($"{(detalle.SubTotal * (detalle.Descuento / 100)):N2}")</span>
                                    <details class="d-print-none">
                                        <summary class="btn btn-sm btn-outline-primary m-0 p-1">üîΩ</summary>
                                        <InputNumber class="form-control mt-2"
                                            @bind-Value="@detalle.Descuento"
                                            min="0" max="30" step="1"
                                            aria-label="Porcentaje de descuento" />
                                    </details>
                                </div>
                            </td> *@
                            <td class="text-center">$@($"{(detalle.SubTotal - detalle.TotalDesc):N2}")</td>
                            <td>
                                <button class="btn btn-outline-danger btn-sm d-print-none" @onclick="()=>EliminarDetalle(detalle.ProductoId)" aria-label="Eliminar detalle">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Resumen de la venta -->
            <div class="card mt-4">
                <div class="card-header d-flex justify-content-between align-items-center bg-black text-white">
                    <h5 class="mb-0">Resumen</h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-warning btn-sm d-print-none" @onclick="async ()=> await UpdatePage()" title="Actualizar resumen">
                            <i class="bi bi">üîÅ</i>
                        </button>
                        <select class="form-select form-select-sm" required @bind="facturaRequest.TypePayment" aria-label="Tipo de venta">
                            <option disabled value="">TIPO DE VENTA</option>
                            <option value="1" selected>CONTADO üí≤</option>
                            <option value="2">CR√âDITO üí≥</option>
                        </select>
                    </div>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3 d-print-none">
                        <input type="number" @bind="facturaRequest.SaldoPagado" class="form-control form-control-sm" min="0" step="1" placeholder="Monto pagado" aria-label="Monto pagado" />
                        <button class="btn btn-success btn-sm" type="button" @onclick="CalcularCambio">Pagar</button>
                    </div>

                    <ul class="list-unstyled text-uppercase mb-0">
                        <li><strong>SubTotal:</strong> <span class="text-primary">$@($"{(facturaRequest.SubTotal - facturaRequest.ITBIS):N2}")</span></li>
                        <li><strong>ITBIS:</strong> <span class="text-danger">$@($"{facturaRequest.ITBIS:N2}")</span></li>
                        @* <li><strong>Descuento:</strong> <span class="text-success">$@facturaRequest.TotalDesc.ToString("N2")</span></li> *@
                        <li><strong>Importe:</strong> <span class="text-dark"><strong>$@($"{(facturaRequest.SubTotal - facturaRequest.TotalDesc):N2}")</strong></span></li>
                        @if (Info)
                        {
                            <li><strong>Pagado:</strong> <span class="text-success">$@($"{facturaRequest.SaldoPagado:N2}")</span></li>
                            <li><strong>Pendiente:</strong> <span class="text-danger"><strong>$@Cambio.ToString("N2")</strong></span></li>
                        }
                        else
                        {
                            <li><strong>Devuelta:</strong> <span class="text-dark">$@Cambio.ToString("N2")</span></li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Modal para cambio efectivo -->
            <div class="modal fade show d-print-none" tabindex="-1" role="dialog" style="display:@(Chance ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                @(Cambio < 0 ? "Deuda del cliente" : "Devuelta para el cliente")
                            </h5>
                        </div>
                        <div class="modal-body">
                            <h5><strong>@(Cambio < 0 ? "Pendiente:" : "Cambio:")</strong> @Cambio.ToString("N2")</h5>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-danger" type="button" @onclick="CancelarPago" aria-label="Cancelar pago">
                                <i class="bi bi-x-circle-fill"></i>
                            </button>
                            <button class="btn btn-success" type="submit" @onclick="async ()=>{await PrintPageAsync(); await UpdatePage();}" aria-label="Confirmar pago">
                                <i class="bi bi-check-circle-fill"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- PRODUCTOS -->
        <div class="col-md-6 d-print-none">
            <div class="card p-3">
                <div class="card-header bg-black text-white fw-bold text-uppercase">
                    <h6 class="mb-0">¬øQu√© desea el cliente?</h6>
                </div>

                <!-- Descuento -->
                @* <div class="mb-3">
                    <label for="Descuento" class="form-label fw-bold">Descuento (%)</label>
                    <InputNumber @bind-Value="detalleFacturaRequest.Descuento" id="Descuento" class="form-control" min="0" max="30" step="1" aria-describedby="descuentoHelp" />
                    <div id="descuentoHelp" class="form-text">Ingrese descuento m√°ximo 30%</div>
                </div> *@

                <!-- Precio y cantidad -->
                <div class="mb-3 mt-2 d-flex align-items-center gap-3">
                    <label class="fw-bold mb-0">Precio:</label>
                    <span class="form-control w-50">$@Precio.ToString("N2")</span>
                    <InputNumber class="form-control w-25" @bind-Value="Cantidad" min="1" step="1" aria-label="Cantidad" />
                </div>

                <!-- Producto buscador -->
                <div class="row mb-1 d-flex align-items-center gap-3">
                    <div class="col">
                        <label class="form-label fw-bold" for="productoBuscar">Buscar producto</label>
                    </div>
                    <div class="col">
                        <button class="btn btn-success mt-3 w-100" @onclick="AgregarAlDetalle">
                            Agregar al detalle
                        </button>
                    </div>
                </div>
                <input
                    id="productoBuscar"
                    class="form-control mb-2"
                    placeholder="Producto"
                    @oninput="(e) => FiltrarProductos(e.Value.ToString())"
                    aria-autocomplete="list"
                    autocomplete="off" />

                <div id="productos" class="list-group overflow-auto" style="max-height: 300px;">
                    @foreach (var producto in ProductosFiltrados)
                    {
                        <button class="list-group-item list-group-item-action d-flex align-items-center gap-2" type="button" @onclick="()=>BuscarPercio(producto.Id)">
                            <img src="me.jpg" alt="Imagen producto" class="img-thumbnail" style="width:50px; height:50px;" />
                            <div>
                                <strong>@producto.CodigoDescripcion</strong><br />
                                <small>stock: @producto.Stock | precio: $@producto.Precio</small>
                            </div>
                        </button>
                    }
                </div>

                @if (Message != null)
                {
                    <div class="alert alert-warning mt-3 fw-bold">
                        @Message
                    </div>
                }
            </div>
        </div>

    </div>
</EditForm>


@code {
    public bool Chance { get; set; } = false;
    public bool Info { get; set; } = false;
    public string? Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public string ItemName { get; set; } = string.Empty;
    public string Filtro { get; set; } = "";
    public List<ClienteResponse> Contactos { get; set; } = new();
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<ProductoResponse> Productos { get; set; } = new List<ProductoResponse>();
    public FacturaRequest facturaRequest { get; set; } = new();
    public FacturaDetalleRequest detalleFacturaRequest { get; set; } = new();
    public decimal Precio { get; set; } = 0;
    public int Cantidad { get; set; } = 1;
    public int Stock { get; set; }
    public int IdProducto { get; set; } = 0;
    public List<ProductoResponse> ProductosFiltrados { get; set; } = new();
    public ProductoResponse? ProductoSeleccionado { get; set; }


    private string FormatCustomerId(string customerId)
    {
        // Verifica si el n√∫mero telef√≥nico tiene la longitud esperada
        if (customerId != null && customerId.Length == 11)
        {
            // Formatea el n√∫mero telef√≥nico
            return $"{customerId.Substring(0, 3)}-{customerId.Substring(3, 7)}-{customerId.Substring(10)}";
        }
        else
        {
            // Devuelve el n√∫mero telef√≥nico sin cambios si no tiene la longitud esperada
            return customerId;
        }
    }

    async Task UpdatePage()
    {
        if(facturaRequest.Detalles.Any())
        {
            Precio = 0;
            Stock = 0;
            // Eliminar la informaci√≥n en facturaRequest.Detalles
            facturaRequest.Detalles.Clear();
            Chance = false;

            // Actualizar el valor de @ultimoIdFactura
            await Consultar();
        }
        else{
            await Consultar();
            Message = "Everything is ok üëåüèº";
            Message = null;
        }
    }
    // M√©todo para obtener el √∫ltimo Id de Factura
    void BuscarPercio(int idProducto)
    {
        Precio = Productos.FirstOrDefault(p => p.Id == idProducto)!.Precio;
        Stock = Productos.FirstOrDefault(p => p.Id == idProducto)!.Stock;
        IdProducto = idProducto;
    }
    void BuscarSeleccionarCliente(string Contacto)
    {
        var c = Contactos.FirstOrDefault(p => p.Nombre+" "+p.Apellidos == Contacto)!;
        if (c != null) facturaRequest.ClienteId = c.Id;
    }
    void EliminarDetalle(int Id)
    {
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        if (detalle != null)
        {
            facturaRequest.Detalles.Remove(detalle);
        }
    }
    
   async Task CargarContacto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await clienteServices.Consultar("");
        if (r.Success)
        {
            Contactos = r.Data!;
        }
    }
    async Task CargarProducto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await productoServices.Consultar("");
        if (r.Success)
        {
            Productos = r.Data!;
        }
    }

    //Esto es para mostrar el Numero de la factura a registrar
    int ultimoIdFactura = 0;
    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();

            // Obtener el Id de la √∫ltima factura registrada + 1
            ultimoIdFactura = Facturas.FirstOrDefault()?.Id + 1 ?? 1;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarContacto();
        await CargarProducto();
        await Consultar();
        

    }

    void AgregarAlDetalle()
    {
        if (string.IsNullOrEmpty(Nombre))
        {
            Message = "üòí Debes seleccionar un cliente. üôç‚Äç‚ôÇÔ∏è";
            return;
        }
        if (detalleFacturaRequest.Descuento > 30)
        {
            Message = "üòí El decuento no puede ser mayor a 30%. üí∞";
            return;
        }

        Message = null;
        var producto = Productos.FirstOrDefault(p => p.Id == IdProducto);

        if (producto != null)
        {
            var detalleExistente = facturaRequest.Detalles.FirstOrDefault(d => d.ProductoId == IdProducto);

            if (detalleExistente != null)
            {
                int nuevaCantidad = detalleExistente.Cantidad + Cantidad;

                if (nuevaCantidad <= producto.Stock)
                {
                    detalleExistente.Cantidad = nuevaCantidad;
                }
                else
                {
                    Message = "No hay suficientes art√≠culos en el stock. üò•";
                    return;
                }
            }
            else
            {
                if (Cantidad <= producto.Stock)
                {
                    facturaRequest.Detalles.Add(new FacturaDetalleRequest
                    {
                        ProductoId = IdProducto,
                        Descripcion = producto.Nombre,
                        Precio = producto.Precio,
                        Cantidad = Cantidad,
                        Descuento = detalleFacturaRequest.Descuento
                    });
                    Cantidad = 1;
                }
                else
                {
                    Message = "No hay suficientes art√≠culos en el stock. üò•";
                    return;
                }
            }

            Message = null;
        }
    }
   
    public string TypePayment {get; set;} = string.Empty;
    async Task Send()
    {
        if (facturaRequest.SaldoPagado > facturaRequest.SubTotal - facturaRequest.TotalDesc 
            && facturaRequest.TypePayment == "2")
        {
            Pendiente();

            return;
        }
        
        BuscarSeleccionarCliente(Nombre);

        // Convertir ICollection a List antes de llamar a la funci√≥n ActualizarStock
        var detallesList = facturaRequest.Detalles.ToList();

        // Llamada a la funci√≥n para actualizar el stock
        await productoServices.StokVendido(
            detallesList.Select(d => d.ProductoId).ToList(), detallesList);

        var result = await facturaServices.Crear(facturaRequest);
        Message = null;

    }

    void CancelarPago()
    {
        Chance = false;
        Total = 0;
        MontoPagado = 0;
        Cambio = 0;
    }

    public decimal Cambio = 0;
    public decimal MontoPagado = 0;
    public decimal SaldoPendiente = 0;
    public decimal Total = 0;
    void CalcularCambio()
    {
        if(facturaRequest.SaldoPagado < facturaRequest.SubTotal - facturaRequest.TotalDesc &&  facturaRequest.TypePayment == "1")
        {
            Message = "üòí El monto pagado no puede ser menor al importe de la factura üí∞";
            return;
        }
        if (facturaRequest.Detalles.Count == 0)
        {
            Message = "üòí Debes agregar al menos un producto al detalle. üõí";
            return;
        }

        if (string.IsNullOrEmpty(facturaRequest.TypePayment))
        {
            Message = "üòí Debes seleccionar el tipo de venta. üí∞";
            return;
        }
        

        if (facturaRequest.TypePayment == "2")
        {
            Info = true;
        }

        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        Message = null;
    }
    void Pendiente()
    {
        if(facturaRequest.TypePayment=="2")
        {
            if(MontoPagado >= Total){
                Message = "El monto pagado no puede ser mayor o igual al total üò¢";
                return;
            }
        }
        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        SaldoPendiente = Total - MontoPagado;
        Message = null;
    }
    private async Task PrintPageAsync()
    {
        // Llama a la funci√≥n JavaScript para imprimir la p√°gina
        await JSRuntime.InvokeVoidAsync("printPage");
        UpdatePage();
    }

    void FiltrarProductos(string filtro)
    {
        Filtro = filtro;
        ProductosFiltrados = Productos
            .Where(p => p.CodigoDescripcion.Contains(filtro, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    void SeleccionarProducto(ProductoResponse producto)
    {
        ProductoSeleccionado = producto;
        Filtro = ""; // Limpia el campo de entrada despu√©s de seleccionar un producto
    }

    protected override void OnInitialized()
    {
        ProductosFiltrados = Productos; // Inicialmente muestra todos los productos
    }
}