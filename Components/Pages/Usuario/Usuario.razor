@page "/user"
@attribute [Authorize]


<div class="row">
    <div class="col-12">
        <h1 class="d-none d-print-block text-center">Listado de usuarios</h1>
    </div>
</div>

 
<div class="modal" style="display: @(ShowConfirmation ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content shadow-lg rounded-4">
            <div class="modal-header bg-light border-0">
                <h5 class="modal-title text-dark fw-bold">¬øEst√°s seguro?</h5>
                <button type="button" class="btn-close" aria-label="Cerrar" @onclick="OpenClosedConfirmation"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-0">Esta acci√≥n no se puede deshacer. ¬øDeseas continuar?</p>
            </div>
            <div class="modal-footer justify-content-center border-0">
                <button class="btn btn-success px-4"
                        @onclick="async () => {
                            await Eliminar(user);
                            OpenClosedConfirmation();
                        }">
                    <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i> S√≠, eliminar
                </button>
                <button class="btn btn-outline-secondary px-4"
                        @onclick="OpenClosedConfirmation">
                    <i style="font-size: 15px;" class="fw-bold">‚úñÔ∏è</i> Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" style="display: @(showCard ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title text-uppercase"><b>@TituloForm</b></h5>
                <button type="button" class="close btn btn-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseCard">
                    <i style="font-size: 15px;" class="fw-bold">X</i>
                </button>
            </div>

            <EditForm Model="request" OnValidSubmit="Send">
                <div class="modal-body">
                    @if (Message != null)
                    {
                        <div class="alert alert-warning text-center">
                            <label class="text-dark"><strong>@Message</strong></label>
                        </div>
                    }

                    <div class="form-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i style="font-size: 15px;" class="fw-bold">üë§</i>
                            </span>
                            <input type="text" class="form-control" id="nombre" 
                            @bind-value="request.Nombre" placeholder="Nombre" required />
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i style="font-size: 15px;" class="fw-bold">üîñ</i>
                            </span>
                            <input type="text" class="form-control" id="apellidos" 
                            @bind-value="request.Apellidos" placeholder="Apellidos" required />
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i style="font-size: 15px;" class="fw-bold">üìß</i>
                            </span>
                            <input type="email" class="form-control" id="email" 
                            @bind-value="request.Email" placeholder="Email" required />
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i style="font-size: 15px;" class="fw-bold">üîí</i>
                            </span>
                            <input type="password" class="form-control" id="password"
                            @bind-value="request.Password" placeholder="Password" required />
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i style="font-size: 15px;" class="fw-bold">üõ°Ô∏è</i>
                            </span>
                            @if (Role == "Admin")
                            {
                                <select class="form-select" required @bind="@request.Role">
                                    <option disabled selected>Seleccione un role</option>
                                    <option value="Admin">Admin</option>
                                    <option value="User">User</option>
                                </select>
                            }
                            else
                            {
                                <select class="form-select" required @bind="@request.Role">
                                    <option disabled selected>Seleccione un role</option>
                                    <option value="User">User</option>
                                </select>
                            }
                        </div>
                    </div>

                </div>

                <div class="modal-footer bg-dark text-white">
                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseCard">Cerrar</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>


<div class="table-container">
    <div class="card col-12">
        <div class="card-body">
            <div class="row">
                <div class="col-11">
                    @if(Role == "Admin")
                    {
                        <!-- Button trigger modal -->
                        <button class="btn btn-outline-success d-print-none" @onclick="ShowCard">
                            <span aria-hidden="true"><i style="font-size: 20px;" class="fw-bold">‚ûï</i></span>
                        </button>
                    }
                </div>
                <div class="col-1">
                    <button class="btn btn-outline-danger" @onclick='()=>{urlHelper.NavigateTo("/inicio");}'>
                        <i style="font-size: 20px;" class="fw-bold">‚¨Ö</i>
                    </button>
                </div>
            </div>
            
            <div class="row mt-2">
                <div class="col-8"></div>
                <div class="col-4">
                    <div class="input-group">
                        <input type="text" class="form-control border-0 border-bottom" 
                        placeholder="Buscar por nombre" @bind="Filtro">
                        <button class="btn btn-outline-secondary border-0 border-bottom" 
                            type="button" id="button-addon2" @onclick="()=>CargarContactos()">
                            <i style="font-size: 20px;" class="fw-bold">üîé</i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="row-12 mt-2">
                <table class="table table-striped">
                    <thead class="bg-black text-white">
                        <tr>
                            <th>#</th>
                            <th>Nombre</th>
                            <th>Apellidos</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>...</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Usuarios)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Nombre</td>
                                <td>@item.Apellidos</td>
                                <td>@item.Email</td>
                                <td>@item.Role</td>
                                <td>
                                    <button @onclick="()=>Seleccionar(item.Id)"
                                        class="btn btn-outline-primary">
                                        <i style="font-size: 15px;" class="fw-bold">‚úèÔ∏è</i>
                                    </button>
                                    @if(Role == "Admin")
                                    {
                                        <button @onclick="()=>ShowQuestion(item)"
                                            class="btn btn-outline-danger ms-1">
                                            <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i>
                                        </button>
                                    }
                                    else
                                    {
                                       <button class="btn btn-outline-danger ms-1">
                                            <i style="font-size: 15px;" class="fw-bold">üîí</i>
                                        </button> 
                                    }
                                </td>
                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
</div>

@code {
    public string TituloForm => request.Id == 0 ? 
    "Agregar usuario" : "Modificar usuario";
    
    public string Filtro { get; set; } = "";
    public List<UsuarioResponse> Usuarios { get; set; } = new();
    public UsuarioResponse user { get; set; } = new();
    public UsuarioRequest request { get; set; } = new();
    public bool showCard { get; set; } = false;
    public bool ShowConfirmation { get; set; } = false;
    public string? Message { get; set; } = null;
    public string Role { get; set; } = "";
    public string UserId = "";

    void ShowCard()
    {
        showCard = true;
    }

    void OpenClosedConfirmation()
    {
        ShowConfirmation = !ShowConfirmation;
        StateHasChanged();
    }
    //Metodos Para confirmar las perdidas
    void ShowQuestion(UsuarioResponse selectedUsuario)
    {
        OpenClosedConfirmation();
        user = selectedUsuario; // Usa la variable de instancia en lugar de declarar una nueva.
    }


    void CloseCard()
    {
        request  = new UsuarioRequest();
        showCard = false;
        Message = null;
    }

    async Task CargarContactos()
    {
        var resultado =
        await usuarioServices.Consultar(Filtro);
        if (resultado.Success)
        {
            int UserIdInt;
            if (int.TryParse(UserId, out UserIdInt))
            {
                // Si la conversi√≥n es exitosa, contin√∫a con el filtro
                if (Role != "Admin")
                {
                    // Filtra por la propiedad Matricula si el rol es "Student"
                    Usuarios = resultado.Data!
                        .Where(u => u.Id == UserIdInt)
                        .ToList();
                }
                else
                {
                    Usuarios = resultado.Data!;
                }
            }
            else
            {
                // Maneja el caso donde la conversi√≥n falla, si es necesario
                // Por ejemplo, puedes lanzar una excepci√≥n o mostrar un mensaje de error
                throw new Exception("UserId no es un n√∫mero v√°lido.");
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener el estado de autenticaci√≥n
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Verifica si el usuario est√° autenticado
        if (user.Identity.IsAuthenticated)
        {
            // Extrae los valores de los reclamos y asigna las propiedades
            Role = user.FindFirst(ClaimTypes.Role)?.Value ?? "";
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        }
        await CargarContactos();
    }

    void Cancelar()
    {
        request  = new UsuarioRequest();
        showCard = false;
    }
    public async Task Send()
    {
        if (request.Password.Length < 4 || request.Password.Length > 8)
        {
            Message = "üòí La contrase√±a debe tener entre 4 y 8 caracteres. üîë";
            return;
        }
        if (request.Email.Length < 4)
        {
            Message = "üòí El Email debe tener 3 o m√°s caracteres. üìß";
            return;
        }
        if(request.Id == 0)
        {
            var existingUser = Usuarios.FirstOrDefault(u => u.Email.ToLower().Equals(request.Email.ToLower(), StringComparison.OrdinalIgnoreCase));
            if (existingUser != null)
            {
                Message = "Este correo ya existe ü§®";
                return;
            }
            //Debo registrar el contacto..
            var r = await usuarioServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await usuarioServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
        Message = null;
    }

    public void Seleccionar(int Id)
    {
        showCard = true;
        request = Usuarios
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new UsuarioRequest();
    }
    public async Task Eliminar(UsuarioResponse item)
    {
        var resultado = await usuarioServices.Eliminar(item.ToRequest());
        if (resultado.Success)
        {
            await CargarContactos();
            StateHasChanged();
        }
    }

}