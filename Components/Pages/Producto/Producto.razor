@page "/producto"
@attribute [Authorize]


<h1 class="d-none d-print-block text-center">Listado de Productos</h1>

<div class="modal" style="display: @(ShowConfirmation ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content shadow-lg rounded-4">
            <div class="modal-header bg-light border-0">
                <h5 class="modal-title text-dark fw-bold">¬øEst√°s seguro?</h5>
                <button type="button" class="btn-close" aria-label="Cerrar" @onclick="OpenClosedConfirmation"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-0">Esta acci√≥n no se puede deshacer. ¬øDeseas continuar?</p>
            </div>
            <div class="modal-footer justify-content-center border-0">
                <button class="btn btn-success px-4"
                        @onclick="async () => {
                            await Eliminar(product);
                            OpenClosedConfirmation();
                        }">
                    <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i> S√≠, eliminar
                </button>
                <button class="btn btn-outline-secondary px-4"
                        @onclick="OpenClosedConfirmation">
                    <i style="font-size: 15px;" class="fw-bold">‚úñÔ∏è</i> Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" style="display: @(showCard ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title"><b>@TituloForm</b></h5>
                <button type="button" class="close btn btn-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseCard">
                    <i style="font-size: 18px;" class="fw-bold">X</i>
                </button>
            </div>

            <EditForm Model="productoRequest" OnValidSubmit="Send">
                <div class="modal-body">
                    @if (Message != null)
                    {
                        <div class="alert-warning text-center">
                            <label class="text-dark"><strong>@Message</strong></label>
                        </div>
                    }
                    <div class="form-group input-group mb-3 mt-1">
                        <span class="input-group-text bg-white text-black">
                            <i style="font-size: 20px;" class="fw-bold">#</i>
                        </span>
                        @if(Role == "Admin")
                        {
                            <input type="text" class="form-control" placeholder="Codigo" id="nombreCompleto" 
                                @bind-value="productoRequest.Codigo" required />
                        }
                        else{
                            <input type="text" class="form-control" placeholder="Codigo" id="nombreCompleto" 
                                @bind-value="productoRequest.Codigo" required readonly/>
                        }
                    </div>
                    @if(productoRequest.Id > 0)
                    {
                        <div class="row mb-3">
                            <div class="col">
                                <div class="input-group">
                                    <label class="input-group-text bg-white text-black">
                                        <i style="font-size: 20px;" class="fw-bold">+</i>
                                    </label>
                                    <input type="number" class="form-control"  
                                        @bind-value="@Stock"/>
                                </div>
                            </div>
                            <div class="col">
                                <div class="input-group">
                                    <label class="input-group-text bg-white text-black"><strong>Stock</strong></label>
                                    @if(Role == "Admin")
                                    {
                                        <input type="number" class="form-control" placeholder="Stock" id="correo" 
                                            @bind-value="productoRequest.Stock" required min="0.01" step="0.01"
                                            title="Agrega la cantidad de productos"/>
                                    }
                                    else{
                                        <input type="number" class="form-control" placeholder="Stock" id="correo" 
                                            @bind-value="productoRequest.Stock" required min="0.01" step="0.01"
                                            title="Agrega la cantidad de productos" readonly/>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else{
                        <div class="form-group input-group mb-3">
                            <span class="input-group-text bg-white text-black">
                                <strong>Stock</strong>
                            </span>
                            <input type="number" class="form-control" placeholder="Stock" id="correo" 
                                @bind-value="productoRequest.Stock" required min="1" step="1"
                                title="Agrega la cantidad de productos"/>
                        </div>
                    }
                    <div class="form-group input-group mb-3">
                        <span class="input-group-text bg-white text-black">
                            <i style="font-size: 20px;" class="fw-bold">üìù</i>
                        </span>
                        <input type="text" class="form-control" placeholder="Descripci√≥n" id="correo" 
                            @bind-value="productoRequest.Nombre" required/>
                    </div>
                    <div class="form-group input-group mb-3">
                        <div class="input-group">
                            <span class="input-group-text bg-white text-black">
                                <i style="font-size: 20px;" class="fw-bold">üì¶</i>
                            </span>
                            <select class="form-select" placeholder="Categoria" required @bind="productoRequest.CategoriaID">
                                @if (Categorias.Any())
                                {
                                    <option disabled selected>Selecciona una categor√≠a</option>
                                    @foreach (var item in Categorias)
                                    {
                                        <option value="@item.Id">
                                            @item.Nombre
                                        </option>
                                    }
                                }
                                else
                                {
                                    <option disabled selected>No hay categor√≠as disponibles</option>
                                }
                            </select>
                            <button class="btn btn-outline-success" @onclick="GoCategory">
                                <i style="font-size: 20px;" class="fw-bold">+</i>
                            </button>
                        </div>
                    </div>
                    @* <div class="form-group input-group mb-3">
                        <span class="input-group-text bg-white text-black">
                            <span class="oi oi-dollar"><strong>Compra</strong></span>
                        </span>
                        <input class="form-control" placeholder="Precio/Compra" id="costo" 
                        @bind-value="productoRequest.PrecioCompra" required min="0.01" step="0.01"
                        @oninput="ActualizarPrecioVenta" title="Precio de compra"/>
                    </div> *@
                    <div class="form-group input-group mb-3">
                        <span class="input-group-text bg-white text-black">
                            <i style="font-size: 20px;" class="fw-bold">üí∞</i>
                        </span>
                        @if(productoRequest.Id > 0)
                        {
                            @if(Role == "Admin")
                            {
                                <input class="form-control" placeholder="Precio/Venta" id="precio" 
                                @bind-value="productoRequest.Precio" required min="0.01" step="0.01"
                                title="Precio de venta"/>
                            }
                            else{
                                <input class="form-control" placeholder="Precio/Venta" id="precio" 
                                @bind-value="productoRequest.Precio" required min="0.01" step="0.01"
                                title="Precio de venta" readonly/>
                            }
                        }
                        else{
                            <input class="form-control" placeholder="Precio/Venta" id="precio" 
                                @bind-value="productoRequest.Precio" required min="0.01" step="0.01"
                                title="Precio de venta"/>
                        }
                    </div>
                    <div class="form-group input-group mb-3">
                        <InputFile OnChange="OnInputFileChange" class="form-control" type="file" id="formFile" />
                    </div>
                </div>

                <div class="modal-footer bg-dark text-white">
                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseCard">Cerrar</button>
                    </div>
                </div>
            </EditForm>

        </div>
    </div>
</div>

<div class="table-container">
    <div class="card col-12">
        <div class="card-body">
            <!-- Button trigger modal -->
            <button class="btn btn-outline-success d-print-none" @onclick="ShowCard">
                <span aria-hidden="true"><i style="font-size: 20px;" class="fw-bold">‚ûï</i></span>
            </button>
            <button class="btn btn-outline-secondary d-print-none text-black" 
                @onclick="async ()=>{await PrintPageAsync();}">
                <span aria-hidden="true"><i style="font-size: 20px;" class="fw-bold">üñ®</i></span>
            </button>

            <div class="row">
                <div class="col-8"></div>
                <div class="col-4">
                    <div class="input-group d-print-none">
                        <input type="text" class="form-control border-0 border-bottom" 
                        placeholder="Buscar por nombre" @bind="Filtro">
                        <button class="btn btn-outline-secondary border-0 border-bottom" 
                            type="button" id="button-addon2" @onclick="()=>CargarDatos()">
                            <i style="font-size: 20px;" class="fw-bold">üîé</i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="row d-flex justify-content-center d-print-none">
                @foreach (var row in Productos)
                {
                    <div class="col-lg-4 col-md-6 col-sm-12 mt-3">
                        <div class="card shadow-sm border-0 rounded-3 h-100 text-center" style="width: 18rem;">
                            <img src="@(!string.IsNullOrEmpty(row.ImagenRuta) ? row.ImagenRuta : "/img/no-image.png")"
                                class="card-img-top"
                                style="object-fit: cover;" height="175"/>
                            <div class="card-body">
                                <h5 class="card-title text-dark text-truncate mb-1" style="max-width: 200px; margin: auto;">
                                    <b>@row.Nombre</b>
                                </h5>

                                <div class="text-start small">
                                    <div class="mb-0">
                                        <span class="text-muted fw-bold">C√≥digo:</span>
                                        <span class="ms-1">@row.Codigo</span>
                                    </div>

                                    <div class="mb-0">
                                        <span class="text-muted fw-bold">Categor√≠a:</span>
                                        <span class="ms-1">@row.Categoria.Nombre</span>
                                    </div>

                                    <div class="mb-0">
                                        <span class="text-muted fw-bold">Stock:</span>
                                        <span class="ms-1">@row.Stock</span>
                                    </div>

                                    <div class="mb-0">
                                        <span class="text-muted fw-bold">Precio:</span>
                                        <span class="ms-1 text-success">RD$ @row.Precio.ToString("N2")</span>
                                    </div>
                                </div>
                            </div>


                            <div class="card-footer bg-white border-0 d-flex justify-content-center gap-2">
                                <button class="btn btn-outline-warning" @onclick="()=>Seleccionar(row.Id)">
                                    <i style="font-size: 15px;" class="fw-bold">‚úèÔ∏è</i>
                                </button>

                                @if (Role == "Admin")
                                {
                                    <button class="btn btn-outline-danger" @onclick="()=>ShowQuestion(row)" title="Eliminar">
                                        <i style="font-size: 15px;" class="fw-bold">üóëÔ∏è</i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger d-print-none" disabled>
                                        <i style="font-size: 15px;" class="fw-bold">üîí</i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>



            <div class="row-12 mt-2 d-none d-print-block">
                <table class="table table-striped table-bordered shadow-sm rounded overflow-hidden">
                    <thead class="bg-black text-white">
                        <tr>
                            <th scope="col">Imagen</th>
                            <th scope="col">Codigo</th>
                            <th scope="col">Stock</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">Categoria</th>
                            @* <th>Precio/Compra</th> *@
                            <th>Precio/Venta</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var productoRow in Productos)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(productoRow.ImagenRuta))
                                    {
                                        <img src="@productoRow.ImagenRuta" width="70" height="70" class="img-thumbnail mt-2" />
                                    }
                                    @if (string.IsNullOrEmpty(productoRow.ImagenRuta))
                                    {
                                        <img src="/img/no-image.png" width="70" height="70" class="img-thumbnail mt-2" />
                                    }
                                </td>
                                <td>@productoRow.Codigo</td>
                                <td>@productoRow.Stock</td>
                                <td>@productoRow.Nombre</td>
                                <td>@productoRow.Categoria.Nombre</td>
                                @* <td>@productoRow.PrecioCompra.ToString("N2")</td> *@
                                <td>$@productoRow.Precio.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
</div>

@code {
    public string TituloForm => productoRequest.Id == 0 ? 
    "Agregar producto" : "Modificar producto";
    
    public string Filtro { get; set; } = "";
    public bool ShowForm { get; set; } = false;
    public List<ProductoResponse> Productos { get; set; } = new();
    public List<CategoriaResponse> Categorias { get; set; } = new();
    public List<ProveedorResponse> Proveedores { get; set; } = new();
    public ProductoResponse product { get; set; } = new();
    public ProductoRequest productoRequest { get; set; } = new();
    public bool showCard { get; set; } = false;
    public bool ShowConfirmation { get; set; } = false;
    public string Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public string NombreEmp { get; set; } = string.Empty;
    public int Stock { get; set; } = 0;
    public string Role { get; set; } = "";

    // C√≥digo para generar un c√≥digo de 4 d√≠gitos √∫nico
    private string GenerarCodigoUnico()
    {
        string nuevoCodigo;
        var random = new Random();
        do
        {
            // Genera un c√≥digo de 4 d√≠gitos aleatorio
            nuevoCodigo = random.Next(1000, 10000).ToString();
        }
        // Verifica que el c√≥digo no est√© en la lista de productos ya registrados
        while (Productos.Any(p => p.Codigo == nuevoCodigo));
        return nuevoCodigo;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var extension = Path.GetExtension(file.Name);
        var fileName = $"{Guid.NewGuid()}{extension}";
        var path = Path.Combine(Environment.CurrentDirectory, "wwwroot", "img");

        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        var filePath = Path.Combine(path, fileName);
        await using var stream = File.Create(filePath);
        await file.OpenReadStream().CopyToAsync(stream);

        // Guardar la ruta relativa para usarla en la etiqueta <img>
        productoRequest.ImagenRuta = $"/img/{fileName}";
    }

    void GoCategory()
    {
        urlHelper.NavigateTo("category");
    }
    
    // Modifica la funci√≥n ShowCard para que asigne un c√≥digo √∫nico
    void ShowCard()
    {
        productoRequest = new ProductoRequest
        {
            Codigo = GenerarCodigoUnico()
        };
        showCard = true;
    }

    void CloseCard()
    {
        productoRequest  = new ProductoRequest();
        showCard = false;
        Message = null;
        Stock = 0;
    }

    void OpenClosedConfirmation()
    {
        ShowConfirmation = !ShowConfirmation;
        StateHasChanged();
    }
    //Metodos Para confirmar las perdidas
    void ShowQuestion(ProductoResponse seletedItem)
    {
        OpenClosedConfirmation();
        product = seletedItem; // Usa la variable de instancia en lugar de declarar una nueva.
    }
    
    async Task CargarDatos()
    {
        var resultado =
        await productoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Productos = resultado.Data!.OrderByDescending(p => p.Id).ToList();
        }
    }
    async Task CargarProveedores()
    {
        var resultado =
        await proveedorServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Proveedores = resultado.Data!;
        }
    }
    async Task CargarCategorias()
    {
        var resultado =
        await categoriaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Categorias = resultado.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener el estado de autenticaci√≥n
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Verifica si el usuario est√° autenticado
        if (user.Identity.IsAuthenticated)
        {
            // Extrae los valores de los reclamos y asigna las propiedades
            Role = user.FindFirst(ClaimTypes.Role)?.Value ?? "";
        }
        await CargarDatos();
        await CargarProveedores();
        await CargarCategorias();
    }

    void Cancelar()
    {
        productoRequest  = new ProductoRequest();
        showCard = false;
        Stock = 0;
    }
    
    public async Task Send()
    {
        try
        {
            if (productoRequest.Id == 0)
            {
                var existingUser = Productos.FirstOrDefault(u => u.Codigo.Equals(productoRequest.Codigo, StringComparison.OrdinalIgnoreCase));
                if (existingUser != null)
                {
                    Message = "El c√≥digo " + productoRequest.Codigo + " ya pertenece a un articulo ü§®";
                    return;
                }
                var r = await productoServices.Crear(productoRequest);
                if (r.Success)
                {
                    Cancelar();
                    await CargarDatos();
                    StateHasChanged();
                }
                else
                {
                    Message = r.Message;
                }
            }
            else
            {
                // Debo solicitar modificar el producto.
                if (Stock > 0)
                {
                    productoRequest.Stock += Stock;
                }
                var r = await productoServices.Modificar(productoRequest);
                if (r.Success)
                {
                    Cancelar();
                    await CargarDatos();
                    StateHasChanged();
                }
                else
                {
                    Message = r.Message;
                }
            }
        }
        catch (Exception ex)
        {
            // Registra la excepci√≥n interna para obtener m√°s detalles.
            var innerException = ex.InnerException?.Message ?? ex.Message;
            Message = "Ocurri√≥ un error al guardar los cambios: " + innerException;
        }
    }

    public void Seleccionar(int Id)
    {
        showCard = true;
        productoRequest = Productos
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new ProductoRequest();
    }
    public async Task Eliminar(ProductoResponse item)
    {
        var resultado = await productoServices.Eliminar(item.ToRequest());
        if (resultado.Success)
        {
            await CargarDatos();
            StateHasChanged();
        }
    }
    
    private async Task PrintPageAsync()
    {
        // Llama a la funci√≥n JavaScript para imprimir la p√°gina
        await JSRuntime.InvokeVoidAsync("printPage");
    }
    @* void ActualizarPrecioVenta(ChangeEventArgs args)
    {
        if (decimal.TryParse(args.Value.ToString(), out decimal precioCompra))
        {
            // Calcula el precio de venta sumando un 30% al precio de compra
            productoRequest.Precio = precioCompra * 1.3m; // Aumento del 30%
        }
    } *@

}