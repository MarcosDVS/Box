@page "/"
@using Authentication;
@inject IUserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider

<div class="container py-1 bg-light">
    <div class="row justify-content-center align-items-center min-vh-100">
        <div class="col-md-2 col-lg-4">
            <AuthorizeView>
                <Authorized>
                    <div class="card border-0 shadow-lg rounded-4 p-2 text-center">
                        <div class="mb-3">
                            <i class="bi bi-person-circle display-1 text-primary"></i>
                        </div>
                        <h2 class="fw-bold text-uppercase">¡Bienvenid@@!</h2>
                        <p class="lead mb-4">
                            <i class="bi bi-person-badge me-2"></i>
                            @context.User.FindFirstValue(ClaimTypes.GivenName)
                        </p>
                        <button class="btn btn-primary btn-lg w-100" @onclick="NavigateToHome">
                            <i class="bi bi-house-door-fill me-2"></i> Ir al Inicio
                        </button>
                    </div>
                </Authorized>

                <NotAuthorized>
                    <div class="card border-0 shadow-lg rounded-4 p-4 text-center">
                        <div class="mb-3">
                            <i class="bi bi-person-circle display-1 text-primary"></i>
                        </div>
                        <h2 class="fw-bold text-uppercase mb-4">Iniciar Sesión</h2>
                        <form>
                            <div class="form-floating mb-3 text-start">
                                <input type="email" class="form-control" id="userInput" placeholder="Usuario" @bind="model.UserName">
                                <label for="userInput">Usuario</label>
                            </div>
                            <div class="form-floating mb-4 text-start">
                                <input type="password" class="form-control" id="passwordInput" placeholder="Contraseña" @bind="model.Password">
                                <label for="passwordInput">Contraseña</label>
                            </div>
                            <button type="button" class="btn btn-primary btn-lg w-100" @onclick="Authenticate">Entrar</button>
                        </form>

                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-warning mt-4" role="alert">
                                <p class="text-dark fw-bold mb-0">@mensajeError</p>
                            </div>
                        }
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>


@code 
{
    private string mensajeError = "";
    private LoginModel model = new LoginModel();

    private class LoginModel
    {
        public string UserName { get; set; } = null!;
        public string Password { get; set; } = null!;  
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(model.UserName) || string.IsNullOrWhiteSpace(model.Password))
        {
            mensajeError = "😒 Complete los campos patrón";
        }
        else
        {
            try 
            {
                var userAccount = userAccountService.GetByUserName(model.UserName);
                if(userAccount == null || userAccount.Password != model.Password)
                {
                    mensajeError = "❌Credenciales incorrectas";
                    return;
                }

                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserId = userAccount.Id,
                    UserName = userAccount.Email,
                    Name = userAccount.Nombre + " " + userAccount.Apellidos,
                    Role = userAccount.Role? .ToString() ?? "Usuario"
                });
                NavigateToHome();
                mensajeError = string.Empty;
            }
            catch (Exception ex)
            {
                mensajeError = "Error al iniciar sesión: " + ex.Message;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Llamada a CrearUsuarioAdmin antes de intentar autenticar
        await usuarioServices.CrearUsuarioAdmin();
        // Resto de tu código OnInitializedAsync

        await clienteServices.CrearCliente();
    }

    private void NavigateToHome()
    {
        urlHelper.NavigateTo("/inicio");
    }
}
